def Square:
    freq: cob,
    note_on: boolean,
begin
    s = max(0, SineOsc(freq, phase=0) * 0.2)
    f = Envelope(
        attack='cubed'(0.01),
        decay='cubed'(0.1),
        release='cubed'(1.0),
        sustain_volume=1,
        note_on
    )
    out s * f * pi
end

def MySineOsc:
    freq: cob,
    phase: cob,
begin
    out sin((Cycle(speed=freq) + phase) * 2 * pi)
end

def InnerInstrument:
    freq: cob,
    note_on: boolean,
begin
    //freq = freq * (1 + 0.02 * SineOsc(freq=4, phase=0))

    //out Filter(input=PulseOsc(color, freq), type='low_pass', cutoff=0.3, res=0) * Gate(note_on)

    f = Envelope(
        attack='cubed'(0.25),
        decay='cubed'(0.1),
        release='cubed'(1.0),
        sustain_volume=1,
        note_on
    )
    out f * Filter(input=
        //PulseOsc(color, freq)
        MySineOsc(freq, phase=
            MySineOsc(freq=freq * 0.5, phase=
                MySineOsc(freq=freq * 0.1, phase=0)
            )
        )
    , type='low_pass', cutoff=0.3, res=0)

    //out FilteredSawtoothInstrument(freq, note_on)
end

def Echoes:
    input: waveform,
    echo_volume: constant,
    filter_type: FilterType,
begin
    out delay 11025 begin
        result = input + feedback * echo_volume

        out result
        feedback Filter(input=result, type=filter_type, cutoff=0.1, res=0)
    end
end

def Instrument:
    freq: cob,
    note_on: boolean,
begin
    input = 0.5 * InnerInstrument(freq=freq*2, note_on)

    out Echoes(input, echo_volume=0.6, filter_type='low_pass')

    //out Square(freq, note_on)
end
