- zig API where you can pass a pack of custom builtin functions to be available to a script. maybe you access them by a prefix (module name) in the script, maybe they're just all in the global namespace along with the native builtins.
- implement unary minus. currently it's not even supported in literals!

later/convenience features:
- codegen_zig: write a reset method, resetting all the fields and delays.
- (optimization) let-assignments should be lazily evaluated, so copies can be elided if you use them in only one place.

bugs/notes:
- script modules zero out their outputs before writing to them.

big eventual goals:
- unify constant, waveform, and cob into a single "float" type. how it's modelled should be hidden from the user

---------------

support union(enum), such as Painter.Curve, which is used by a lot of essential builtins:

    pub const Curve = union(enum) {
        instantaneous,
        linear: f32, // duration (must be > 0)
        squared: f32, // ditto
        cubed: f32, // ditto
    };

what should the syntax be?

---------------

some kind of syntax for specifying curves that you would pass to the Curve module:

    curve: []const CurveNode,

    pub const CurveNode = struct {
        value: f32,
        t: f32,
    };

this will be related to the note syntax which i need eventually as well...
the note tracker is a lot more complicated than the curve module, because it breaks things down into spans.

    .tracker = Notes.NoteTracker.init(&[_]Notes.SongEvent {
        comptime makeNote(0.0, 1, a4 * f.c4, true),
        comptime makeNote(1.0, 2, a4 * f.ab3, true),
        comptime makeNote(2.0, 3, a4 * f.g3, true),
        comptime makeNote(3.0, 4, a4 * f.eb3, true),
        comptime makeNote(4.0, 5, a4 * f.c3, true),
        comptime makeNote(5.0, 5, a4 * f.c3, false),
    }),
